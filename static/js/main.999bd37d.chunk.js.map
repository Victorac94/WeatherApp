{"version":3,"sources":["components/Cards/CardCurrent/CardCurrent.module.css","components/UI/Buttons/ShowMore/ShowMore.module.css","components/Cards/CardForecast/CardForecast.module.css","components/Cards/CardCurrent/CardCurrent.js","components/Cards/CardForecast/CardForecast.js","components/UI/Buttons/ShowMore/ShowMore.js","store/actions/actionTypes.js","store/actions/fetchWeather.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/weather.js","store/sagas/fetchWeather.js","store/sagas/index.js","index.js"],"names":["module","exports","card__location","card__currentWeather","card__animatedIcon","card__day","card","showMore","card__currentWeather__avgTemp","card__currentWeather__maxMin","card__currentWeather__maxMin__max","card__currentWeather__maxMin__min","card__weatherIcon","cardCurrent","props","react_default","a","createElement","className","classes","myLocation","name","country","isCelsiusActive","myCurrent","temp_c","temp_f","condition","text","src","icon","alt","cardForecast","oldDate","date","Date","myForecast","date_epoch","toDateString","split","push","slice","join","day","avgtemp_c","toFixed","avgtemp_f","maxtemp_c","maxtemp_f","mintemp_c","mintemp_f","onClick","FETCH_WEATHER","FETCH_CITY_WEATHER","fetchWeatherSucceed","data","type","fetchCityWeatherSucceed","App","state","showLastCards","toggleSearchBar","searchBox","document","querySelector","searchBoxInput","classList","contains","remove","add","focus","searchCity","e","preventDefault","search","console","log","value","_this","onFetchCityWeather","activateCelsius","degreesContainer","cel","firstElementChild","fah","lastElementChild","stateCopy","Object","objectSpread","setState","activateFahrenheit","showMoreDays","this","onFetchWeather","cards","lastCards","_this2","myState","current","i","CardCurrent","key","location","CardForecast","forecast","forecastday","onSubmit","placeholder","ShowMore","Component","connect","dispatch","actionTypes","city","action","Boolean","window","hostname","match","initialState","oldState","updatedProperties","reducer","arguments","length","undefined","fetchWeatherStart","fetchCityWeatherStart","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","put","stop","_marked","cityURI","_context2","encodeURI","_marked2","watchWeather","takeEvery","sagas_marked","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","store","createStore","weatherReducer","applyMiddleware","run","app","es","src_App_0","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.999bd37d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card__location\":\"CardCurrent_card__location__fOSCM\",\"card__currentWeather\":\"CardCurrent_card__currentWeather__2AOf3\",\"card__animatedIcon\":\"CardCurrent_card__animatedIcon__3-9G2\",\"card__day\":\"CardCurrent_card__day__1OLUf\",\"card\":\"CardCurrent_card__11_zo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"showMore\":\"ShowMore_showMore__7obxi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card__location\":\"CardForecast_card__location__FdaZR\",\"card__currentWeather\":\"CardForecast_card__currentWeather__2wcRH\",\"card__currentWeather__avgTemp\":\"CardForecast_card__currentWeather__avgTemp__jbaxh\",\"card__currentWeather__maxMin\":\"CardForecast_card__currentWeather__maxMin__lTeDt\",\"card__currentWeather__maxMin__max\":\"CardForecast_card__currentWeather__maxMin__max__1iFau\",\"card__currentWeather__maxMin__min\":\"CardForecast_card__currentWeather__maxMin__min__3_HJK\",\"card__weatherIcon\":\"CardForecast_card__weatherIcon__3idZo\",\"card__day\":\"CardForecast_card__day__3Viwa\",\"card\":\"CardForecast_card__86uwr\"};","import React from 'react';\r\n\r\nimport classes from './CardCurrent.module.css';\r\nimport '../Cards.css';\r\n\r\nconst cardCurrent = (props) => {\r\n  return (\r\n    <section className={classes.card + \" card\"}>\r\n      <div className={classes.card__location}>\r\n        <p>{props.myLocation.name}</p>\r\n        <p>{props.myLocation.country}</p>\r\n      </div>\r\n      <div className={classes.card__currentWeather}>\r\n        <p>\r\n          {props.isCelsiusActive ? props.myCurrent.temp_c : props.myCurrent.temp_f}<span>º</span>\r\n        </p>\r\n        <i className=\"icon-right-thin\"></i>\r\n        <span>{props.myCurrent.condition.text}</span>\r\n      </div>\r\n      <div className={classes.card__animatedIcon}>\r\n        <img src={props.myCurrent.condition.icon} alt={props.myCurrent.condition.text}/>\r\n      </div>\r\n      <div className={classes.card__day}>\r\n        <p>NOW</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default cardCurrent;\r\n","import React from 'react';\r\n\r\nimport classes from './CardForecast.module.css';\r\nimport '../Cards.css';\r\n\r\nconst cardForecast = (props) => {\r\n  let oldDate = null;\r\n  let date = [];\r\n  //The 'date_epoch' we get from the API is in seconds so we need to\r\n  //multiply it by 1000 to use it with new Date()\r\n  oldDate = new Date(props.myForecast.date_epoch * 1000).toDateString();\r\n  oldDate = oldDate.split(\" \"); //Get the string date and transform it into an array\r\n  date.push(oldDate.slice(0, 1)); //Get the day of the week\r\n  date.push(oldDate.slice(2, 3)); //Get the day of the month\r\n  date = date.join(\" \");\r\n\r\n  return (\r\n    <section className={classes.card + \" card\"}>\r\n      <div className={classes.card__location}>\r\n        <p>{props.myLocation.name}</p>\r\n        <p>{props.myLocation.country}</p>\r\n      </div>\r\n      <div className={classes.card__currentWeather}>\r\n        <p className={classes.card__currentWeather__avgTemp}>\r\n          {props.isCelsiusActive ? props.myForecast.day.avgtemp_c.toFixed(0) : props.myForecast.day.avgtemp_f.toFixed(0)}\r\n          <span>º</span>\r\n        </p>\r\n        <i className=\"icon-right-thin\"></i>\r\n        <div className={classes.card__currentWeather__maxMin}>\r\n          <div className={classes.card__currentWeather__maxMin__max}>\r\n            <span>\r\n              {props.isCelsiusActive ? props.myForecast.day.maxtemp_c.toFixed(0) : props.myForecast.day.maxtemp_f.toFixed(0)}\r\n              º\r\n            </span>\r\n            <span>MAX</span>\r\n          </div>\r\n          <div className={classes.card__currentWeather__maxMin__min}>\r\n            <span>\r\n              {props.isCelsiusActive ? props.myForecast.day.mintemp_c.toFixed(0) : props.myForecast.day.mintemp_f.toFixed(0)}\r\n              º\r\n            </span>\r\n            <span>MIN</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={classes.card__weatherIcon}>\r\n        <img src={props.myForecast.day.condition.icon} alt={props.myForecast.day.condition.text}/>\r\n      </div>\r\n      <div className={classes.card__day}>\r\n        <p>{date}</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default cardForecast;\r\n","import React from 'react';\r\n\r\nimport classes from './ShowMore.module.css';\r\n\r\nconst showMore = (props) => {\r\n  return (\r\n    <button onClick={props.showMore} className={classes.showMore}><span>+</span></button>\r\n  )\r\n}\r\n\r\nexport default showMore;\r\n","export const FETCH_WEATHER = 'FETCH_WEATHER';\r\nexport const FETCH_WEATHER_SUCCEED = 'FETCH_WEATHER_SUCCEED';\r\nexport const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER';\r\nexport const FETCH_CITY_WEATHER_SUCCEED = 'FETCH_CITY_WEATHER_SUCCEED';\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const fetchWeather = () => {\r\n  return {\r\n    type: actionTypes.FETCH_WEATHER\r\n  }\r\n}\r\n\r\nexport const fetchWeatherSucceed = (data) => {\r\n  return {\r\n    type: actionTypes.FETCH_WEATHER_SUCCEED,\r\n    data: data\r\n  }\r\n}\r\n\r\nexport const fetchCityWeather = (city) => {\r\n  return {\r\n    type: actionTypes.FETCH_CITY_WEATHER,\r\n    city: city\r\n  }\r\n}\r\n\r\nexport const fetchCityWeatherSucceed = (data) => {\r\n  return {\r\n    type: actionTypes.FETCH_CITY_WEATHER_SUCCEED,\r\n    data: data\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardCurrent from './components/Cards/CardCurrent/CardCurrent';\nimport CardForecast from './components/Cards/CardForecast/CardForecast';\nimport ShowMore from './components/UI/Buttons/ShowMore/ShowMore';\nimport './App.css';\nimport * as action from './store/actions/fetchWeather';\n\nclass App extends Component {\n\n  state =  {\n    showLastCards: false,\n    isCelsiusActive: true\n  }\n\n  toggleSearchBar = () => {\n    const searchBox = document.querySelector(\".searchBox\");\n    const searchBoxInput = document.querySelector(\".searchBox input\");\n    //Hide the searchBox\n    if (searchBox.classList.contains(\"searchBoxShow\")) {\n      searchBox.classList.remove(\"searchBoxShow\");\n      searchBoxInput.classList.remove(\"searchBoxShowInputPadding\");\n    } \n    //Show the searchBox\n    else {\n      searchBox.classList.add(\"searchBoxShow\");\n      searchBoxInput.classList.add(\"searchBoxShowInputPadding\");\n      searchBoxInput.focus();\n    }\n  }\n\n  searchCity = e => {\n    e.preventDefault();\n    const search = document.querySelector(\".searchBox input\");\n    console.log(search.value);\n    this.props.onFetchCityWeather(search.value);\n  }\n\n  activateCelsius = () => {\n    const degreesContainer = document.querySelector(\".degreeUnits\");\n    const cel = degreesContainer.firstElementChild;\n    const fah = degreesContainer.lastElementChild;\n\n    if (cel.classList.contains(\"degreeUnits__active\")) return;\n    else {\n      cel.classList.add(\"degreeUnits__active\");\n      fah.classList.remove(\"degreeUnits__active\");\n      const stateCopy = {...this.state};\n      this.setState({...stateCopy, isCelsiusActive: true})\n    }\n  }\n\n  activateFahrenheit = () => {\n    const degreesContainer = document.querySelector(\".degreeUnits\");\n    const cel = degreesContainer.firstElementChild;\n    const fah = degreesContainer.lastElementChild;\n\n    if (cel.classList.contains(\"degreeUnits__active\")) {\n      cel.classList.remove(\"degreeUnits__active\");\n      fah.classList.add(\"degreeUnits__active\");\n      const stateCopy = {...this.state};\n      this.setState({...stateCopy, isCelsiusActive: false})\n    }\n    else return;\n  }\n\n  showMoreDays = () => {\n    this.setState({showLastCards: true});\n  }\n\n  componentDidMount() {\n    this.props.onFetchWeather();\n  }\n\n  render() {\n    let cards;\n    let lastCards;\n\n    if (this.props.myState.current) {\n      cards = [];\n      lastCards = [];\n\n      for ( let i = 0; i < 5; i++) {\n        let card = null;\n\n        if (i === 0) {\n          card = (\n            <CardCurrent\n              key={i}\n              isCelsiusActive={this.state.isCelsiusActive}\n              myCurrent={this.props.myState.current}\n              myLocation={this.props.myState.location} />\n          );\n          cards.push(card);\n        }\n        else if (i === 3 || i === 4) {\n          //These are the last 2 cards, they'll be hidden by default\n          //until the user presses the 'show more' button\n          card = (\n            <CardForecast\n              key={i}\n              isCelsiusActive={this.state.isCelsiusActive}\n              myForecast={this.props.myState.forecast.forecastday[i]}\n              myLocation={this.props.myState.location} />\n          );\n          lastCards.push(card);\n        }\n        else {\n          card = (\n            <CardForecast\n              key={i}\n              isCelsiusActive={this.state.isCelsiusActive}\n              myForecast={this.props.myState.forecast.forecastday[i]}\n              myLocation={this.props.myState.location} />\n          );\n          cards.push(card);\n        }\n      }\n    } else {\n      cards = null;\n      lastCards = null;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"appHeader\">\n          <form className=\"searchBox\" onSubmit={(e) => this.searchCity(e)}>\n            <input type=\"text\" placeholder=\"Search your city...\" />\n            <span className=\"searchBox__icon icon-search\" onClick={() => this.toggleSearchBar()}></span>\n          </form>\n          <h2>Weather</h2>\n          <div className=\"degreeUnits\">\n            <div onClick={() => this.activateCelsius()} className=\"degreeUnits__celsius degreeUnits__active\">\n              ºC\n            </div>\n            <div onClick={() => this.activateFahrenheit()} className=\"degreeUnits__fahrenheit\">\n              ºF\n            </div>\n          </div>\n        </header>\n        {cards}\n        {this.state.showLastCards ? lastCards : null}\n        {this.props.myState.current && !this.state.showLastCards ?\n          <ShowMore showMore={() => this.showMoreDays()}/>\n          : null}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    myState: state\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchWeather: () => dispatch(action.fetchWeather()),\n    onFetchCityWeather: (city) => dispatch(action.fetchCityWeather(city))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldState, updatedProperties) => {\r\n  return {\r\n    ...oldState,\r\n    ...updatedProperties\r\n  }\r\n};\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../shared/utility';\r\n\r\nconst initialState = {\r\n  current: null,\r\n  forecast: null,\r\n  location: null\r\n}\r\n\r\n//This function will handle default fetchWeather and city searched weather\r\nconst fetchWeatherSucceed = (state, action) => {\r\n  const data = action.data;\r\n  const current = {...data.current};\r\n  const forecast = {...data.forecast};\r\n  const location = {...data.location};\r\n  const newProps = { current, forecast, location }\r\n\r\n  return updateObject(state, newProps);\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_WEATHER_SUCCEED: return fetchWeatherSucceed(state, action);\r\n    case actionTypes.FETCH_CITY_WEATHER_SUCCEED: return fetchWeatherSucceed(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default reducer;\r\n","import axios from 'axios';\r\nimport { put } from 'redux-saga/effects';\r\n\r\nimport { fetchWeatherSucceed, fetchCityWeatherSucceed } from '../actions/fetchWeather';\r\n\r\nexport function* fetchWeatherStart() {\r\n  const response = yield axios.get('https://api.apixu.com/v1/forecast.json?key=54dac3d1c97d4b04927144355181810&q=auto:ip&days=5');\r\n  console.log(response.data);\r\n  yield put(fetchWeatherSucceed(response.data));\r\n}\r\n\r\nexport function* fetchCityWeatherStart(data) {\r\n  const cityURI = encodeURI(data.city);\r\n  const response = yield axios.get('https://api.apixu.com/v1/forecast.json?key=54dac3d1c97d4b04927144355181810&q=' + cityURI + '&days=5');\r\n  console.log(response.data);\r\n  yield put(fetchCityWeatherSucceed(response.data))\r\n}\r\n","//takeEvery nos permite escuchar ciertas acciones y hacer algo cuando esto ocurra\r\nimport { takeEvery } from 'redux-saga/effects';\r\n\r\nimport * as actionTypes from '../actions/actionTypes';\r\nimport { fetchWeatherStart, fetchCityWeatherStart } from './fetchWeather';\r\n\r\nexport default function* watchWeather() {\r\n  yield takeEvery(actionTypes.FETCH_WEATHER, fetchWeatherStart);\r\n  yield takeEvery(actionTypes.FETCH_CITY_WEATHER, fetchCityWeatherStart);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport weatherReducer from './store/reducers/weather';\nimport watchWeather from './store/sagas/index.js';\n\n// Si estamos en development mode entonces habilitamos la extension de chrome, sino usamos 'compose'\n// process.env hace referencia a las variables de entorno de React\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\n//Creamos el Saga Middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n//Añadimos el Saga Middleware al store\nconst store = createStore(weatherReducer, composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n));\n\n// Corremos en el sagaMiddleware el saga que hemos creado e importado.\n// Estos sagas son los que ejecutan otros sagas cuando ciertas acciones son despachadas en la aplicación.\nsagaMiddleware.run(watchWeather);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}